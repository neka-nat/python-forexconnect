#ifndef FOREXCONNECTCLIENT_H
#define FOREXCONNECTCLIENT_H

#include "stdafx.h"
#include "SessionStatusListener.h"
#include "ResponseListener.h"
#include <boost/date_time/posix_time/posix_time.hpp>
#include <boost/date_time/c_local_time_adjustor.hpp>
#include <boost/python/list.hpp>
#include <boost/python/dict.hpp>
#include <sstream>
#include <iomanip>
#include <stdint.h>

namespace pyforexconnect
{
    static const std::string DEFAULT_FOREX_URL = "${DEFAULT_FOREX_URL}";

    struct LoginParams
    {
        std::string mLogin;
        std::string mPassword;
        std::string mConnection;
        std::string mUrl;
        LoginParams();
        LoginParams(const std::string& login,
              const std::string& password,
              const std::string& connection,
              const std::string& url = DEFAULT_FOREX_URL);
    };
    std::ostream& operator<<(std::ostream& out, LoginParams const& lp);

    struct AccountInfo
    {
        double mBalance;
        double mUsedMargin;
        double mUsableMargin;
        int mBaseUnitSize;
        double mEquity;
        double mGrossPL;
        AccountInfo();
    };
    std::ostream& operator<<(std::ostream& out, AccountInfo const& ai);

    struct TradeInfo
    {
        std::string mInstrument;
        std::string mTradeID;
        std::string mBuySell;
        double mOpenRate;
        int mAmount;
        boost::posix_time::ptime mOpenDate;
        double mGrossPL;
        bool operator==(const TradeInfo& other);
        bool operator!=(const TradeInfo& other);
	      TradeInfo();
    };
    std::ostream& operator<<(std::ostream& out, TradeInfo const& ti);

    struct Prices
    {
        boost::posix_time::ptime mDate;
        double mAskOpen;
        double mAskHigh;
        double mAskLow;
        double mAskClose;
        double mBidOpen;
        double mBidHigh;
        double mBidLow;
        double mBidClose;
        int mVolume;
        bool operator==(const Prices& other);
        bool operator!=(const Prices& other);
        Prices();
        Prices(boost::posix_time::ptime date,
               double value);
        Prices(boost::posix_time::ptime date,
               double askopen,
               double askhigh,
               double asklow,
               double askclose,
               double bidopen,
               double bidhigh,
               double bidlow,
               double bidclose,
               int volume);
    };
    std::ostream& operator<<(std::ostream& out, Prices const& pr);


    class ForexConnectTradingClient
    {
        public:
        ForexConnectTradingClient(const std::string& login,
                           const std::string& password,
                           const std::string& connection,
                           const std::string& url = DEFAULT_FOREX_URL);
        ForexConnectTradingClient(const LoginParams& loginParams);
        ~ForexConnectTradingClient();
        
        std::vector<TradeInfo> getTrades();
        std::map<std::string, std::string> getOffers();
        boost::python::list getTradesForPython();
        
        bool openPosition(const std::string& instrument,
              const std::string& buysell,
              int amount);
        bool closePosition(const std::string& tradeID);
        
        std::string getAccountID() const;
        AccountInfo getAccountInfo();
        
        bool isConnected() const;
        bool hasError() const;
        bool login();
        void logout();

    private:
        void init();
        
        LoginParams mLoginParams;
        IO2GSession* mpSession;
        SessionStatusListener* mpListener;
        ResponseListener* mpResponseListener;
        IO2GLoginRules* mpLoginRules;
        IO2GAccountRow* mpAccountRow;
        IO2GResponseReaderFactory* mpResponseReaderFactory;
        IO2GRequestFactory* mpRequestFactory;
        std::string mAccountID;
        bool mIsConnected;

        static boost::posix_time::ptime toPtime(double d)
        {
            double d_int, d_frac;
            d_frac = modf(d, &d_int);
            time_t t = time_t(d_int - 25569.0) * 86400 + time_t(floor((d_frac * 86400) + 0.5));
            return boost::posix_time::from_time_t(t);

        }
        
        static bool findOfferRowBySymbol(IO2GOfferRow *row, std::string symbol)
        {
            return (symbol == row->getInstrument() && row->getSubscriptionStatus()[0] == 'T');
        }

        static bool findOfferRowByOfferId(IO2GOfferRow *row, std::string offerId)
        {
            return (offerId == row->getOfferID());
        }

        static IO2GOffersTableResponseReader* getOffersReader(IO2GResponseReaderFactory* readerFactory,
                          IO2GResponse *response)
        {
            return readerFactory->createOffersTableReader(response);
        }
    };

    class ForexConnectHistoryClient
    {
        public:
        ForexConnectHistoryClient(const std::string& login,
                           const std::string& password,
                           const std::string& connection,
                           const std::string& url = DEFAULT_FOREX_URL);
        ForexConnectHistoryClient(const LoginParams& loginParams);
        ~ForexConnectHistoryClient();

        std::vector<Prices> getHistoricalPrices(const std::string& instrument,
                                                const double& from,
                                                const double& to,
                                                const std::string& timeFrame = std::string("m1"));
        boost::python::list getHistoricalPricesForPython(const std::string& instrument,
                     const double& from,
                     const double& to,
                     const std::string& timeFrame = std::string("m1"));


        bool isConnected() const;
        bool hasError() const;
        bool login();
        void logout();

    private:
        void init();
        
        std::vector<Prices> getPricesFromResponse(IO2GResponse* response);
        
        LoginParams mLoginParams;
        IO2GSession* mpSession;
        SessionStatusListener* mpListener;
              ResponseListener* mpResponseListener;
              IO2GLoginRules* mpLoginRules;
              IO2GResponseReaderFactory* mpResponseReaderFactory;
              IO2GRequestFactory* mpRequestFactory;
              std::string mAccountID;
        bool mIsConnected;

        static boost::posix_time::ptime toPtime(double d)
        {
            double d_int, d_frac;
            d_frac = modf(d, &d_int);
            time_t t = time_t(d_int - 25569.0) * 86400 + time_t(floor((d_frac * 86400) + 0.5));
            return boost::posix_time::from_time_t(t);

        }

        static double toOleTime(const boost::posix_time::ptime& t)
        {
            double d;
            struct tm ttm = boost::posix_time::to_tm(t);
            time_t tt = mktime(&ttm);
            struct tm gttm = *gmtime(&tt);
            CO2GDateUtils::CTimeToOleTime(&gttm, &d);
            return d;
        }
    };

    class ForexConnectOffersClient
    {
        public:
        ForexConnectOffersClient(const std::string& login,
                           const std::string& password,
                           const std::string& connection,
                           const std::string& url = DEFAULT_FOREX_URL);
        ForexConnectOffersClient(const LoginParams& loginParams);
        ~ForexConnectOffersClient();
        double getBid(const std::string& instrument);
        double getAsk(const std::string& instrument);
        std::string getOfferTradingStatus(const std::string& instrument);
        double getOfferTime(const std::string& instrument);
        double getPointSize(const std::string& instrument);
        std::string getContractCurrency(const std::string& instrument);
        std::map<std::string, std::string> getOffers();
        std::map<std::string, double> getTime();
        std::map<std::string, std::string> getTradingStatus();
        boost::python::dict getOffersForPython();
        boost::python::dict getTradingStatusForPython();
        boost::python::dict getTimeForPython();
        boost::python::tuple getBidAsk(const std::string& instrument);
        bool isConnected() const;
        bool hasError() const;
        bool login();
        void logout();

    private:
        void init();

        LoginParams mLoginParams;
        IO2GSession* mpSession;
        SessionStatusListener* mpListener;
              IO2GLoginRules* mpLoginRules;
        bool mIsConnected;

        static bool findOfferRowBySymbol(IO2GOfferRow *row, std::string symbol)
        {
            return (symbol == row->getInstrument() && row->getSubscriptionStatus()[0] == 'T');
        }

        static bool findOfferRowByOfferId(IO2GOfferRow *row, std::string offerId)
        {
            return (offerId == row->getOfferID());
        }

        static IO2GOffersTableResponseReader* getOffersReader(IO2GResponseReaderFactory* readerFactory,
                          IO2GResponse *response)
        {
            return readerFactory->createOffersTableReader(response);
        }

    };
    
    void setLogLevel(int level);
}
#endif
